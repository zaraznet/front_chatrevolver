/* tslint:disable */
/* eslint-disable */
/**
 * Revolver API
 * Revolver API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { SWRConfiguration } from "swr";

import { AdminUser, AdminUserFromJSON, AdminUserToJSON } from "../models";

export interface UserBlockRequest {
  id: number;
}

export interface UserListRequest {
  search?: string;
}

export interface UserUnblockRequest {
  id: number;
}

/**
 *
 */
export class AdminUserApi extends runtime.BaseAPI {
  /**
   */
  private async userBlockRaw(requestParameters: UserBlockRequest): Promise<runtime.ApiResponse<void>> {
    this.userBlockValidation(requestParameters);
    const context = this.userBlockContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private userBlockValidation(requestParameters: UserBlockRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userBlock."
      );
    }
  }

  /**
   */
  private userBlockContext(requestParameters: UserBlockRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user/{id}/block`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  userBlock = async (id: number): Promise<void> => {
    await this.userBlockRaw({ id: id });
  };

  /**
   */
  private async userListRaw(requestParameters: UserListRequest): Promise<runtime.ApiResponse<Array<AdminUser>>> {
    this.userListValidation(requestParameters);
    const context = this.userListContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdminUserFromJSON));
  }

  /**
   */
  private userListValidation(requestParameters: UserListRequest) {}

  /**
   */
  private userListContext(requestParameters: UserListRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.search !== undefined) {
      queryParameters["search"] = requestParameters.search;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  userList = async (search?: string): Promise<Array<AdminUser>> => {
    const response = await this.userListRaw({ search: search });
    return await response.value();
  };

  useUserList(search?: string, config?: SWRConfiguration<Array<AdminUser>, Error>) {
    let valid = true;

    const context = this.userListContext({ search: search! });
    return useSWR(JSON.stringify(context), valid ? () => this.userList(search!) : null, config);
  }

  /**
   */
  private async userUnblockRaw(requestParameters: UserUnblockRequest): Promise<runtime.ApiResponse<void>> {
    this.userUnblockValidation(requestParameters);
    const context = this.userUnblockContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private userUnblockValidation(requestParameters: UserUnblockRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userUnblock."
      );
    }
  }

  /**
   */
  private userUnblockContext(requestParameters: UserUnblockRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/admin/user/{id}/unblock`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  userUnblock = async (id: number): Promise<void> => {
    await this.userUnblockRaw({ id: id });
  };
}
