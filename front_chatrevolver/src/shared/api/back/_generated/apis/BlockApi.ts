/* tslint:disable */
/* eslint-disable */
/**
 * Revolver API
 * Revolver API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { SWRConfiguration } from "swr";
import { FullUserProfileDTO, FullUserProfileDTOFromJSON, CheckBlockFromJSON } from "../models";

export interface CheckBlockDTO {
  /**
   *
   * @type {boolean}
   * @memberof AppVersion
   */
  isBlocked: boolean;
}

/**
 *
 */
export class BlockApi extends runtime.BaseAPI {
  /**
   */
  private async isBlockedByUserRaw(blockedUserId: number): Promise<runtime.ApiResponse<CheckBlockDTO>> {
    this.isBlockedByUserValidation(blockedUserId);
    const context = this.isBlockedByUserContext(blockedUserId);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => CheckBlockFromJSON(jsonValue));
  }

  /**
   */
  private isBlockedByUserValidation(blockedUserId: number) {
    if (blockedUserId === null || blockedUserId === undefined) {
      throw new runtime.RequiredError(
        "blockedUserId",
        "Required parameter requestParameters.blockedUserId was null or undefined when calling support."
      );
    }
  }

  /**
   */
  private isBlockedByUserContext(blockedUserId: number): runtime.RequestOpts {
    const queryParameters: any = {
      blockedUserId,
    };

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    return {
      path: `/api/user/blocks/${blockedUserId}`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  isBlockedByUser = async (blockedUserId: number): Promise<CheckBlockDTO> => {
    const response = await this.isBlockedByUserRaw(blockedUserId);
    return await response.value();
  };

  useIsBlockedByUser(blockedUserId: number, config?: SWRConfiguration<CheckBlockDTO, Error>) {
    let valid = true;

    if (blockedUserId === null || blockedUserId === undefined || Number.isNaN(blockedUserId)) {
      valid = false;
    }

    const context = this.isBlockedByUserContext(blockedUserId);
    return useSWR(JSON.stringify(context), valid ? () => this.isBlockedByUser(blockedUserId) : null, config);
  }

  /**
   */
  private async blockUserRaw(blockedUserId: number): Promise<runtime.ApiResponse<FullUserProfileDTO>> {
    this.blockUserValidation(blockedUserId);
    const context = this.blockUserContext(blockedUserId);
    const response = await this.request(context);
    return new runtime.JSONApiResponse(response, (jsonValue) => FullUserProfileDTOFromJSON(jsonValue));
  }

  /**
   */
  private blockUserValidation(blockedUserId: number) {
    if (blockedUserId === null || blockedUserId === undefined) {
      throw new runtime.RequiredError(
        "blockedUserId",
        "Required parameter requestParameters.blockedUserId was null or undefined when calling support."
      );
    }
  }

  /**
   */
  private blockUserContext(blockedUserId: number): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    return {
      path: `/api/user/blocks/${blockedUserId}`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  blockUser = async (blockedUserId: number): Promise<FullUserProfileDTO> => {
    console.log("blockUser", blockedUserId);
    const response = await this.blockUserRaw(blockedUserId);
    return await response.value();
  };

  useBlockUser(blockedUserId: number, config?: SWRConfiguration<FullUserProfileDTO, Error>) {
    let valid = true;

    if (blockedUserId === null || blockedUserId === undefined || Number.isNaN(blockedUserId)) {
      valid = false;
    }

    const context = this.blockUserContext(blockedUserId);
    return useSWR(JSON.stringify(context), valid ? () => this.blockUser(blockedUserId) : null, config);
  }

  /**
   */
  private async unBlockUserRaw(blockedUserId: number): Promise<runtime.ApiResponse<FullUserProfileDTO>> {
    this.unBlockUserValidation(blockedUserId);
    const context = this.unBlockUserContext(blockedUserId);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => FullUserProfileDTOFromJSON(jsonValue));
  }

  /**
   */
  private unBlockUserValidation(blockedUserId: number) {
    if (blockedUserId === null || blockedUserId === undefined) {
      throw new runtime.RequiredError(
        "blockedUserId",
        "Required parameter requestParameters.blockedUserId was null or undefined when calling support."
      );
    }
  }

  /**
   */
  private unBlockUserContext(blockedUserId: number): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }

    return {
      path: `/api/user/blocks/${blockedUserId}`,
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  unBlockUser = async (blockedUserId: number): Promise<FullUserProfileDTO> => {
    const response = await this.unBlockUserRaw(blockedUserId);
    return await response.value();
  };

  useUnBlockUser(blockedUserId: number, config?: SWRConfiguration<FullUserProfileDTO, Error>) {
    let valid = true;

    if (blockedUserId === null || blockedUserId === undefined || Number.isNaN(blockedUserId)) {
      valid = false;
    }

    const context = this.unBlockUserContext(blockedUserId);
    return useSWR(JSON.stringify(context), valid ? () => this.unBlockUser(blockedUserId) : null, config);
  }
}
