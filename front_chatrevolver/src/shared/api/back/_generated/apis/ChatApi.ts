/* tslint:disable */
/* eslint-disable */
/**
 * Revolver API
 * Revolver API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { SWRConfiguration } from "swr";

import {
  ChatWithMessageDTO,
  ChatWithMessageDTOFromJSON,
  ChatWithMessageDTOToJSON,
  MessageDTO,
  MessageDTOFromJSON,
  MessageDTOToJSON,
} from "../models";

export interface DeleteChatRequest {
  id: number;
}

export interface GetChatRequest {
  id: number;
}

export interface MessagesRequest {
  id: number;
  createdBefore?: number;
}

export interface VipChatEntryRequest {
  id: number;
}

/**
 *
 */
export class ChatApi extends runtime.BaseAPI {
  /**
   */
  private async deleteChatRaw(requestParameters: DeleteChatRequest): Promise<runtime.ApiResponse<void>> {
    this.deleteChatValidation(requestParameters);
    const context = this.deleteChatContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private deleteChatValidation(requestParameters: DeleteChatRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling deleteChat."
      );
    }
  }

  /**
   */
  private deleteChatContext(requestParameters: DeleteChatRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/chat/{id}/delete`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "DELETE",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  deleteChat = async (id: number): Promise<void> => {
    await this.deleteChatRaw({ id: id });
  };

  useDeleteChat(id: number, config?: SWRConfiguration<void, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.deleteChatContext({ id: id! });
    return useSWR(JSON.stringify(context), valid ? () => this.deleteChat(id!) : null, config);
  }

  /**
   */
  private async getChatRaw(requestParameters: GetChatRequest): Promise<runtime.ApiResponse<ChatWithMessageDTO>> {
    this.getChatValidation(requestParameters);
    const context = this.getChatContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => ChatWithMessageDTOFromJSON(jsonValue));
  }

  /**
   */
  private getChatValidation(requestParameters: GetChatRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getChat."
      );
    }
  }

  /**
   */
  private getChatContext(requestParameters: GetChatRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/chat/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  getChat = async (id: number): Promise<ChatWithMessageDTO> => {
    const response = await this.getChatRaw({ id: id });
    return await response.value();
  };

  useGetChat(id: number, config?: SWRConfiguration<ChatWithMessageDTO, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.getChatContext({ id: id! });
    return useSWR(JSON.stringify(context), valid ? () => this.getChat(id!) : null, config);
  }

  /**
   */
  private async getChatsRaw(): Promise<runtime.ApiResponse<Array<ChatWithMessageDTO>>> {
    this.getChatsValidation();
    const context = this.getChatsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatWithMessageDTOFromJSON));
  }

  /**
   */
  private getChatsValidation() {}

  /**
   */
  private getChatsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/chat/all`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  getChats = async (): Promise<Array<ChatWithMessageDTO>> => {
    const response = await this.getChatsRaw();
    return await response.value();
  };

  useGetChats(config?: SWRConfiguration<Array<ChatWithMessageDTO>, Error>) {
    let valid = true;

    const context = this.getChatsContext();
    return useSWR(JSON.stringify(context), valid ? () => this.getChats() : null, config);
  }

  /**
   */
  private async messagesRaw(requestParameters: MessagesRequest): Promise<runtime.ApiResponse<Array<MessageDTO>>> {
    this.messagesValidation(requestParameters);
    const context = this.messagesContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageDTOFromJSON));
  }

  /**
   */
  private messagesValidation(requestParameters: MessagesRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling messages."
      );
    }
  }

  /**
   */
  private messagesContext(requestParameters: MessagesRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.createdBefore !== undefined) {
      queryParameters["createdBefore"] = requestParameters.createdBefore;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/chat/{id}/messages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  messages = async (id: number, createdBefore?: number): Promise<Array<MessageDTO>> => {
    const response = await this.messagesRaw({ id: id, createdBefore: createdBefore });
    return await response.value();
  };

  useMessages(id: number, createdBefore?: number, config?: SWRConfiguration<Array<MessageDTO>, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.messagesContext({ id: id!, createdBefore: createdBefore! });
    return useSWR(JSON.stringify(context), valid ? () => this.messages(id!, createdBefore!) : null, config);
  }

  /**
   */
  private async vipChatEntryRaw(
    requestParameters: VipChatEntryRequest
  ): Promise<runtime.ApiResponse<ChatWithMessageDTO>> {
    this.vipChatEntryValidation(requestParameters);
    const context = this.vipChatEntryContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => ChatWithMessageDTOFromJSON(jsonValue));
  }

  /**
   */
  private vipChatEntryValidation(requestParameters: VipChatEntryRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling vipChatEntry."
      );
    }
  }

  /**
   */
  private vipChatEntryContext(requestParameters: VipChatEntryRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/chat/{id}/vip_chat_entry`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  vipChatEntry = async (id: number): Promise<ChatWithMessageDTO> => {
    const response = await this.vipChatEntryRaw({ id: id });
    return await response.value();
  };
}
