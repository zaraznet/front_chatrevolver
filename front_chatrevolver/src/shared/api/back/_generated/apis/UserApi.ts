/* tslint:disable */
/* eslint-disable */
/**
 * Revolver API
 * Revolver API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { SWRConfiguration } from "swr";

import {
  AddPushToken,
  AddPushTokenFromJSON,
  AddPushTokenToJSON,
  EmailNotificationEntity,
  EmailNotificationEntityFromJSON,
  EmailNotificationEntityToJSON,
  FriendshipDTO,
  FriendshipDTOFromJSON,
  FriendshipDTOToJSON,
  FullUserProfileDTO,
  FullUserProfileDTOFromJSON,
  FullUserProfileDTOToJSON,
  ImageEntity,
  ImageEntityFromJSON,
  ImageEntityToJSON,
  IncomingFollowRequestDTO,
  IncomingFollowRequestDTOFromJSON,
  IncomingFollowRequestDTOToJSON,
  NotificationSettingsDTO,
  NotificationSettingsDTOFromJSON,
  NotificationSettingsDTOToJSON,
  PendingReviewDTO,
  PendingReviewDTOFromJSON,
  PendingReviewDTOToJSON,
  PostReviewDTO,
  PostReviewDTOFromJSON,
  PostReviewDTOToJSON,
  PrivacyDTO,
  PrivacyDTOFromJSON,
  PrivacyDTOToJSON,
  PublicUserProfileDTO,
  PublicUserProfileDTOFromJSON,
  PublicUserProfileDTOToJSON,
  QueuePreferenceDTO,
  QueuePreferenceDTOFromJSON,
  QueuePreferenceDTOToJSON,
  ReportDTO,
  ReportDTOFromJSON,
  ReportDTOToJSON,
  SearchPreference,
  SearchPreferenceFromJSON,
  SearchPreferenceToJSON,
  SubmitIncomingRequestDTO,
  SubmitIncomingRequestDTOFromJSON,
  SubmitIncomingRequestDTOToJSON,
  UpdateGeolocationDto,
  UpdateGeolocationDtoFromJSON,
  UpdateGeolocationDtoToJSON,
  UpdatePrivacyDTO,
  UpdatePrivacyDTOFromJSON,
  UpdatePrivacyDTOToJSON,
  UpdateProfileDTO,
  UpdateProfileDTOFromJSON,
  UpdateProfileDTOToJSON,
} from "../models";

export interface AddImageRequest {
  id: string;
}

export interface AddPushTokenRequest {
  addPushToken: AddPushToken;
}

export interface FollowUserRequest {
  id: number;
}

export interface GetUserRequest {
  id: number;
}

export interface PostReviewRequest {
  id: number;
  postReviewDTO: PostReviewDTO;
}

export interface RemoveImageRequest {
  id: string;
}

export interface RemovePushTokenRequest {
  value: string;
}

export interface ReportRequest {
  id: number;
  reportDTO: ReportDTO;
}

export interface SubmitIncomingFriendshipRequestRequest {
  submitIncomingRequestDTO: SubmitIncomingRequestDTO;
}

export interface UnfollowUserRequest {
  id: number;
}

export interface UpdateGeolocationRequest {
  updateGeolocationDto: UpdateGeolocationDto;
}

export interface UpdateNotificationSettingsRequest {
  emailNotificationEntity: EmailNotificationEntity;
}

export interface UpdatePrivacySettingsRequest {
  updatePrivacyDTO: UpdatePrivacyDTO;
}

export interface UpdateProfileRequest {
  updateProfileDTO: UpdateProfileDTO;
}

export interface UpdateQueuePreferencesRequest {
  queuePreferenceDTO: QueuePreferenceDTO;
}

export interface UserSearchRequest {
  page: number;
  withPhotos?: boolean;
  onlyVip?: boolean;
  online?: boolean;
  near?: boolean;
  ageEnd?: number;
  ageStart?: number;
  highRating?: boolean;
  sex?: UserSearchSexEnum;
  country?: string;
  perPage?: number;
}

export interface UserUpdateSearchPreferencesRequest {
  searchPreference: SearchPreference;
}

/**
 *
 */
export class UserApi extends runtime.BaseAPI {
  /**
   */
  private async addImageRaw(requestParameters: AddImageRequest): Promise<runtime.ApiResponse<FullUserProfileDTO>> {
    this.addImageValidation(requestParameters);
    const context = this.addImageContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => FullUserProfileDTOFromJSON(jsonValue));
  }

  /**
   */
  private addImageValidation(requestParameters: AddImageRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling addImage."
      );
    }
  }

  /**
   */
  private addImageContext(requestParameters: AddImageRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/image/add/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  addImage = async (id: string): Promise<FullUserProfileDTO> => {
    const response = await this.addImageRaw({ id: id });
    return await response.value();
  };

  /**
   */
  private async addPushTokenRaw(requestParameters: AddPushTokenRequest): Promise<runtime.ApiResponse<void>> {
    this.addPushTokenValidation(requestParameters);
    const context = this.addPushTokenContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private addPushTokenValidation(requestParameters: AddPushTokenRequest) {
    if (requestParameters.addPushToken === null || requestParameters.addPushToken === undefined) {
      throw new runtime.RequiredError(
        "addPushToken",
        "Required parameter requestParameters.addPushToken was null or undefined when calling addPushToken."
      );
    }
  }

  /**
   */
  private addPushTokenContext(requestParameters: AddPushTokenRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/user/push-token`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: AddPushTokenToJSON(requestParameters.addPushToken),
    };
  }

  /**
   */
  addPushToken = async (addPushToken: AddPushToken): Promise<void> => {
    await this.addPushTokenRaw({ addPushToken: addPushToken });
  };

  /**
   */
  private async deleteProfileRaw(): Promise<runtime.ApiResponse<FullUserProfileDTO>> {
    this.deleteProfileValidation();
    const context = this.deleteProfileContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => FullUserProfileDTOFromJSON(jsonValue));
  }

  /**
   */
  private deleteProfileValidation() {}

  /**
   */
  private deleteProfileContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile/delete`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  deleteProfile = async (): Promise<FullUserProfileDTO> => {
    const response = await this.deleteProfileRaw();
    return await response.value();
  };

  /**
   */
  private async followUserRaw(
    requestParameters: FollowUserRequest
  ): Promise<runtime.ApiResponse<Array<IncomingFollowRequestDTO>>> {
    this.followUserValidation(requestParameters);
    const context = this.followUserContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncomingFollowRequestDTOFromJSON));
  }

  /**
   */
  private followUserValidation(requestParameters: FollowUserRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling followUser."
      );
    }
  }

  /**
   */
  private followUserContext(requestParameters: FollowUserRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/friendship/requests/follow/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  followUser = async (id: number): Promise<Array<IncomingFollowRequestDTO>> => {
    const response = await this.followUserRaw({ id: id });
    return await response.value();
  };

  /**
   */
  private async friendListRaw(): Promise<runtime.ApiResponse<Array<FriendshipDTO>>> {
    this.friendListValidation();
    const context = this.friendListContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FriendshipDTOFromJSON));
  }

  /**
   */
  private friendListValidation() {}

  /**
   */
  private friendListContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/friendship/friends`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  friendList = async (): Promise<Array<FriendshipDTO>> => {
    const response = await this.friendListRaw();
    return await response.value();
  };

  useFriendList(config?: SWRConfiguration<Array<FriendshipDTO>, Error>) {
    let valid = true;

    const context = this.friendListContext();
    return useSWR(JSON.stringify(context), valid ? () => this.friendList() : null, config);
  }

  /**
   */
  private async getMeRaw(): Promise<runtime.ApiResponse<FullUserProfileDTO>> {
    this.getMeValidation();
    const context = this.getMeContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => FullUserProfileDTOFromJSON(jsonValue));
  }

  /**
   */
  private getMeValidation() {}

  /**
   */
  private getMeContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/me`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  getMe = async (): Promise<FullUserProfileDTO> => {
    const response = await this.getMeRaw();
    return await response.value();
  };

  useGetMe(config?: SWRConfiguration<FullUserProfileDTO, Error>) {
    let valid = true;

    const context = this.getMeContext();
    return useSWR(JSON.stringify(context), valid ? () => this.getMe() : null, config);
  }

  /**
   */
  private async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<PublicUserProfileDTO>> {
    this.getUserValidation(requestParameters);
    const context = this.getUserContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => PublicUserProfileDTOFromJSON(jsonValue));
  }

  /**
   */
  private getUserValidation(requestParameters: GetUserRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling getUser."
      );
    }
  }

  /**
   */
  private getUserContext(requestParameters: GetUserRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  getUser = async (id: number): Promise<PublicUserProfileDTO> => {
    const response = await this.getUserRaw({ id: id });
    return await response.value();
  };

  useGetUser(id: number, config?: SWRConfiguration<PublicUserProfileDTO, Error>) {
    let valid = true;

    if (id === null || id === undefined || Number.isNaN(id)) {
      valid = false;
    }

    const context = this.getUserContext({ id: id! });
    return useSWR(JSON.stringify(context), valid ? () => this.getUser(id!) : null, config);
  }

  /**
   */
  private async incomingFriendshipRequestsRaw(): Promise<runtime.ApiResponse<Array<IncomingFollowRequestDTO>>> {
    this.incomingFriendshipRequestsValidation();
    const context = this.incomingFriendshipRequestsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncomingFollowRequestDTOFromJSON));
  }

  /**
   */
  private incomingFriendshipRequestsValidation() {}

  /**
   */
  private incomingFriendshipRequestsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/friendship/requests/incoming`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  incomingFriendshipRequests = async (): Promise<Array<IncomingFollowRequestDTO>> => {
    const response = await this.incomingFriendshipRequestsRaw();
    return await response.value();
  };

  useIncomingFriendshipRequests(config?: SWRConfiguration<Array<IncomingFollowRequestDTO>, Error>) {
    let valid = true;

    const context = this.incomingFriendshipRequestsContext();
    return useSWR(JSON.stringify(context), valid ? () => this.incomingFriendshipRequests() : null, config);
  }

  /**
   */
  private async notificationSettingsRaw(): Promise<runtime.ApiResponse<NotificationSettingsDTO>> {
    this.notificationSettingsValidation();
    const context = this.notificationSettingsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => NotificationSettingsDTOFromJSON(jsonValue));
  }

  /**
   */
  private notificationSettingsValidation() {}

  /**
   */
  private notificationSettingsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/settings/notification`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  notificationSettings = async (): Promise<NotificationSettingsDTO> => {
    const response = await this.notificationSettingsRaw();
    return await response.value();
  };

  useNotificationSettings(config?: SWRConfiguration<NotificationSettingsDTO, Error>) {
    let valid = true;

    const context = this.notificationSettingsContext();
    return useSWR(JSON.stringify(context), valid ? () => this.notificationSettings() : null, config);
  }

  /**
   */
  private async pendingReviewsRaw(): Promise<runtime.ApiResponse<Array<PendingReviewDTO>>> {
    this.pendingReviewsValidation();
    const context = this.pendingReviewsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PendingReviewDTOFromJSON));
  }

  /**
   */
  private pendingReviewsValidation() {}

  /**
   */
  private pendingReviewsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/rating/pendingReviews`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  pendingReviews = async (): Promise<Array<PendingReviewDTO>> => {
    const response = await this.pendingReviewsRaw();
    return await response.value();
  };

  usePendingReviews(config?: SWRConfiguration<Array<PendingReviewDTO>, Error>) {
    let valid = true;

    const context = this.pendingReviewsContext();
    return useSWR(JSON.stringify(context), valid ? () => this.pendingReviews() : null, config);
  }

  /**
   */
  private async postReviewRaw(
    requestParameters: PostReviewRequest
  ): Promise<runtime.ApiResponse<Array<PendingReviewDTO>>> {
    this.postReviewValidation(requestParameters);
    const context = this.postReviewContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PendingReviewDTOFromJSON));
  }

  /**
   */
  private postReviewValidation(requestParameters: PostReviewRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling postReview."
      );
    }
    if (requestParameters.postReviewDTO === null || requestParameters.postReviewDTO === undefined) {
      throw new runtime.RequiredError(
        "postReviewDTO",
        "Required parameter requestParameters.postReviewDTO was null or undefined when calling postReview."
      );
    }
  }

  /**
   */
  private postReviewContext(requestParameters: PostReviewRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/rating/{id}/review`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: PostReviewDTOToJSON(requestParameters.postReviewDTO),
    };
  }

  /**
   */
  postReview = async (id: number, postReviewDTO: PostReviewDTO): Promise<Array<PendingReviewDTO>> => {
    const response = await this.postReviewRaw({ id: id, postReviewDTO: postReviewDTO });
    return await response.value();
  };

  /**
   */
  private async privacySettingsRaw(): Promise<runtime.ApiResponse<PrivacyDTO>> {
    this.privacySettingsValidation();
    const context = this.privacySettingsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => PrivacyDTOFromJSON(jsonValue));
  }

  /**
   */
  private privacySettingsValidation() {}

  /**
   */
  private privacySettingsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/privacy`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  privacySettings = async (): Promise<PrivacyDTO> => {
    const response = await this.privacySettingsRaw();
    return await response.value();
  };

  usePrivacySettings(config?: SWRConfiguration<PrivacyDTO, Error>) {
    let valid = true;

    const context = this.privacySettingsContext();
    return useSWR(JSON.stringify(context), valid ? () => this.privacySettings() : null, config);
  }

  /**
   */
  private async queuePreferencesRaw(): Promise<runtime.ApiResponse<QueuePreferenceDTO>> {
    this.queuePreferencesValidation();
    const context = this.queuePreferencesContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => QueuePreferenceDTOFromJSON(jsonValue));
  }

  /**
   */
  private queuePreferencesValidation() {}

  /**
   */
  private queuePreferencesContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/filter/preferences`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  queuePreferences = async (): Promise<QueuePreferenceDTO> => {
    const response = await this.queuePreferencesRaw();
    return await response.value();
  };

  useQueuePreferences(config?: SWRConfiguration<QueuePreferenceDTO, Error>) {
    let valid = true;

    const context = this.queuePreferencesContext();
    return useSWR(JSON.stringify(context), valid ? () => this.queuePreferences() : null, config);
  }

  /**
   */
  private async removeAllPushTokensRaw(): Promise<runtime.ApiResponse<void>> {
    this.removeAllPushTokensValidation();
    const context = this.removeAllPushTokensContext();
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private removeAllPushTokensValidation() {}

  /**
   */
  private removeAllPushTokensContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/user/push-token/remove-all`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  removeAllPushTokens = async (): Promise<void> => {
    await this.removeAllPushTokensRaw();
  };

  /**
   */
  private async removeImageRaw(
    requestParameters: RemoveImageRequest
  ): Promise<runtime.ApiResponse<FullUserProfileDTO>> {
    this.removeImageValidation(requestParameters);
    const context = this.removeImageContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => FullUserProfileDTOFromJSON(jsonValue));
  }

  /**
   */
  private removeImageValidation(requestParameters: RemoveImageRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling removeImage."
      );
    }
  }

  /**
   */
  private removeImageContext(requestParameters: RemoveImageRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/image/remove/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  removeImage = async (id: string): Promise<FullUserProfileDTO> => {
    const response = await this.removeImageRaw({ id: id });
    return await response.value();
  };

  /**
   */
  private async removePushTokenRaw(requestParameters: RemovePushTokenRequest): Promise<runtime.ApiResponse<void>> {
    this.removePushTokenValidation(requestParameters);
    const context = this.removePushTokenContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private removePushTokenValidation(requestParameters: RemovePushTokenRequest) {
    if (requestParameters.value === null || requestParameters.value === undefined) {
      throw new runtime.RequiredError(
        "value",
        "Required parameter requestParameters.value was null or undefined when calling removePushToken."
      );
    }
  }

  /**
   */
  private removePushTokenContext(requestParameters: RemovePushTokenRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/user/push-token/{value}/remove`.replace(
        `{${"value"}}`,
        encodeURIComponent(String(requestParameters.value))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  removePushToken = async (value: string): Promise<void> => {
    await this.removePushTokenRaw({ value: value });
  };

  /**
   */
  private async reportRaw(requestParameters: ReportRequest): Promise<runtime.ApiResponse<void>> {
    this.reportValidation(requestParameters);
    const context = this.reportContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private reportValidation(requestParameters: ReportRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling report."
      );
    }
    if (requestParameters.reportDTO === null || requestParameters.reportDTO === undefined) {
      throw new runtime.RequiredError(
        "reportDTO",
        "Required parameter requestParameters.reportDTO was null or undefined when calling report."
      );
    }
  }

  /**
   */
  private reportContext(requestParameters: ReportRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/rating/{id}/report`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ReportDTOToJSON(requestParameters.reportDTO),
    };
  }

  /**
   */
  report = async (id: number, reportDTO: ReportDTO): Promise<void> => {
    await this.reportRaw({ id: id, reportDTO: reportDTO });
  };

  /**
   */
  private async restoreProfileRaw(): Promise<runtime.ApiResponse<FullUserProfileDTO>> {
    this.restoreProfileValidation();
    const context = this.restoreProfileContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => FullUserProfileDTOFromJSON(jsonValue));
  }

  /**
   */
  private restoreProfileValidation() {}

  /**
   */
  private restoreProfileContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile/restore`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  restoreProfile = async (): Promise<FullUserProfileDTO> => {
    const response = await this.restoreProfileRaw();
    return await response.value();
  };

  /**
   */
  private async submitIncomingFriendshipRequestRaw(
    requestParameters: SubmitIncomingFriendshipRequestRequest
  ): Promise<runtime.ApiResponse<Array<IncomingFollowRequestDTO>>> {
    this.submitIncomingFriendshipRequestValidation(requestParameters);
    const context = this.submitIncomingFriendshipRequestContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncomingFollowRequestDTOFromJSON));
  }

  /**
   */
  private submitIncomingFriendshipRequestValidation(requestParameters: SubmitIncomingFriendshipRequestRequest) {
    if (
      requestParameters.submitIncomingRequestDTO === null ||
      requestParameters.submitIncomingRequestDTO === undefined
    ) {
      throw new runtime.RequiredError(
        "submitIncomingRequestDTO",
        "Required parameter requestParameters.submitIncomingRequestDTO was null or undefined when calling submitIncomingFriendshipRequest."
      );
    }
  }

  /**
   */
  private submitIncomingFriendshipRequestContext(
    requestParameters: SubmitIncomingFriendshipRequestRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/friendship/requests/incoming/submit`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SubmitIncomingRequestDTOToJSON(requestParameters.submitIncomingRequestDTO),
    };
  }

  /**
   */
  submitIncomingFriendshipRequest = async (
    submitIncomingRequestDTO: SubmitIncomingRequestDTO
  ): Promise<Array<IncomingFollowRequestDTO>> => {
    const response = await this.submitIncomingFriendshipRequestRaw({
      submitIncomingRequestDTO: submitIncomingRequestDTO,
    });
    return await response.value();
  };

  /**
   */
  private async unfollowUserRaw(
    requestParameters: UnfollowUserRequest
  ): Promise<runtime.ApiResponse<Array<IncomingFollowRequestDTO>>> {
    this.unfollowUserValidation(requestParameters);
    const context = this.unfollowUserContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncomingFollowRequestDTOFromJSON));
  }

  /**
   */
  private unfollowUserValidation(requestParameters: UnfollowUserRequest) {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling unfollowUser."
      );
    }
  }

  /**
   */
  private unfollowUserContext(requestParameters: UnfollowUserRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/friendship/requests/unfollow/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  unfollowUser = async (id: number): Promise<Array<IncomingFollowRequestDTO>> => {
    const response = await this.unfollowUserRaw({ id: id });
    return await response.value();
  };

  /**
   */
  private async updateGeolocationRaw(requestParameters: UpdateGeolocationRequest): Promise<runtime.ApiResponse<void>> {
    this.updateGeolocationValidation(requestParameters);
    const context = this.updateGeolocationContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private updateGeolocationValidation(requestParameters: UpdateGeolocationRequest) {
    if (requestParameters.updateGeolocationDto === null || requestParameters.updateGeolocationDto === undefined) {
      throw new runtime.RequiredError(
        "updateGeolocationDto",
        "Required parameter requestParameters.updateGeolocationDto was null or undefined when calling updateGeolocation."
      );
    }
  }

  /**
   */
  private updateGeolocationContext(requestParameters: UpdateGeolocationRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/profile/geolocation`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: UpdateGeolocationDtoToJSON(requestParameters.updateGeolocationDto),
    };
  }

  /**
   */
  updateGeolocation = async (updateGeolocationDto: UpdateGeolocationDto): Promise<void> => {
    await this.updateGeolocationRaw({ updateGeolocationDto: updateGeolocationDto });
  };

  /**
   */
  private async updateNotificationSettingsRaw(
    requestParameters: UpdateNotificationSettingsRequest
  ): Promise<runtime.ApiResponse<NotificationSettingsDTO>> {
    this.updateNotificationSettingsValidation(requestParameters);
    const context = this.updateNotificationSettingsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => NotificationSettingsDTOFromJSON(jsonValue));
  }

  /**
   */
  private updateNotificationSettingsValidation(requestParameters: UpdateNotificationSettingsRequest) {
    if (requestParameters.emailNotificationEntity === null || requestParameters.emailNotificationEntity === undefined) {
      throw new runtime.RequiredError(
        "emailNotificationEntity",
        "Required parameter requestParameters.emailNotificationEntity was null or undefined when calling updateNotificationSettings."
      );
    }
  }

  /**
   */
  private updateNotificationSettingsContext(requestParameters: UpdateNotificationSettingsRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/settings/notification`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: EmailNotificationEntityToJSON(requestParameters.emailNotificationEntity),
    };
  }

  /**
   */
  updateNotificationSettings = async (
    emailNotificationEntity: EmailNotificationEntity
  ): Promise<NotificationSettingsDTO> => {
    const response = await this.updateNotificationSettingsRaw({ emailNotificationEntity: emailNotificationEntity });
    return await response.value();
  };

  /**
   */
  private async updatePrivacySettingsRaw(
    requestParameters: UpdatePrivacySettingsRequest
  ): Promise<runtime.ApiResponse<PrivacyDTO>> {
    this.updatePrivacySettingsValidation(requestParameters);
    const context = this.updatePrivacySettingsContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => PrivacyDTOFromJSON(jsonValue));
  }

  /**
   */
  private updatePrivacySettingsValidation(requestParameters: UpdatePrivacySettingsRequest) {
    if (requestParameters.updatePrivacyDTO === null || requestParameters.updatePrivacyDTO === undefined) {
      throw new runtime.RequiredError(
        "updatePrivacyDTO",
        "Required parameter requestParameters.updatePrivacyDTO was null or undefined when calling updatePrivacySettings."
      );
    }
  }

  /**
   */
  private updatePrivacySettingsContext(requestParameters: UpdatePrivacySettingsRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/privacy`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: UpdatePrivacyDTOToJSON(requestParameters.updatePrivacyDTO),
    };
  }

  /**
   */
  updatePrivacySettings = async (updatePrivacyDTO: UpdatePrivacyDTO): Promise<PrivacyDTO> => {
    const response = await this.updatePrivacySettingsRaw({ updatePrivacyDTO: updatePrivacyDTO });
    return await response.value();
  };

  /**
   */
  private async updateProfileRaw(
    requestParameters: UpdateProfileRequest
  ): Promise<runtime.ApiResponse<FullUserProfileDTO>> {
    this.updateProfileValidation(requestParameters);
    const context = this.updateProfileContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => FullUserProfileDTOFromJSON(jsonValue));
  }

  /**
   */
  private updateProfileValidation(requestParameters: UpdateProfileRequest) {
    if (requestParameters.updateProfileDTO === null || requestParameters.updateProfileDTO === undefined) {
      throw new runtime.RequiredError(
        "updateProfileDTO",
        "Required parameter requestParameters.updateProfileDTO was null or undefined when calling updateProfile."
      );
    }
  }

  /**
   */
  private updateProfileContext(requestParameters: UpdateProfileRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/update`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: UpdateProfileDTOToJSON(requestParameters.updateProfileDTO),
    };
  }

  /**
   */
  updateProfile = async (updateProfileDTO: UpdateProfileDTO): Promise<FullUserProfileDTO> => {
    const response = await this.updateProfileRaw({ updateProfileDTO: updateProfileDTO });
    return await response.value();
  };

  /**
   */
  private async updateQueuePreferencesRaw(
    requestParameters: UpdateQueuePreferencesRequest
  ): Promise<runtime.ApiResponse<QueuePreferenceDTO>> {
    this.updateQueuePreferencesValidation(requestParameters);
    const context = this.updateQueuePreferencesContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => QueuePreferenceDTOFromJSON(jsonValue));
  }

  /**
   */
  private updateQueuePreferencesValidation(requestParameters: UpdateQueuePreferencesRequest) {
    if (requestParameters.queuePreferenceDTO === null || requestParameters.queuePreferenceDTO === undefined) {
      throw new runtime.RequiredError(
        "queuePreferenceDTO",
        "Required parameter requestParameters.queuePreferenceDTO was null or undefined when calling updateQueuePreferences."
      );
    }
  }

  /**
   */
  private updateQueuePreferencesContext(requestParameters: UpdateQueuePreferencesRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/filter/preference`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: QueuePreferenceDTOToJSON(requestParameters.queuePreferenceDTO),
    };
  }

  /**
   */
  updateQueuePreferences = async (queuePreferenceDTO: QueuePreferenceDTO): Promise<QueuePreferenceDTO> => {
    const response = await this.updateQueuePreferencesRaw({ queuePreferenceDTO: queuePreferenceDTO });
    return await response.value();
  };

  /**
   */
  private async uploadImageRaw(): Promise<runtime.ApiResponse<ImageEntity>> {
    this.uploadImageValidation();
    const context = this.uploadImageContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => ImageEntityFromJSON(jsonValue));
  }

  /**
   */
  private uploadImageValidation() {}

  /**
   */
  private uploadImageContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/image/upload`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  uploadImage = async (): Promise<ImageEntity> => {
    const response = await this.uploadImageRaw();
    return await response.value();
  };

  /**
   */
  private async userSearchRaw(
    requestParameters: UserSearchRequest
  ): Promise<runtime.ApiResponse<Array<PublicUserProfileDTO>>> {
    this.userSearchValidation(requestParameters);
    const context = this.userSearchContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicUserProfileDTOFromJSON));
  }

  /**
   */
  private userSearchValidation(requestParameters: UserSearchRequest) {
    if (requestParameters.page === null || requestParameters.page === undefined) {
      throw new runtime.RequiredError(
        "page",
        "Required parameter requestParameters.page was null or undefined when calling userSearch."
      );
    }
  }

  /**
   */
  private userSearchContext(requestParameters: UserSearchRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    if (requestParameters.withPhotos !== undefined) {
      queryParameters["withPhotos"] = requestParameters.withPhotos;
    }

    if (requestParameters.onlyVip !== undefined) {
      queryParameters["onlyVip"] = requestParameters.onlyVip;
    }

    if (requestParameters.online !== undefined) {
      queryParameters["online"] = requestParameters.online;
    }

    if (requestParameters.near !== undefined) {
      queryParameters["near"] = requestParameters.near;
    }

    if (requestParameters.ageEnd !== undefined) {
      queryParameters["ageEnd"] = requestParameters.ageEnd;
    }

    if (requestParameters.ageStart !== undefined) {
      queryParameters["ageStart"] = requestParameters.ageStart;
    }

    if (requestParameters.highRating !== undefined) {
      queryParameters["highRating"] = requestParameters.highRating;
    }

    if (requestParameters.sex !== undefined) {
      queryParameters["sex"] = requestParameters.sex;
    }

    if (requestParameters.country !== undefined) {
      queryParameters["country"] = requestParameters.country;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.perPage !== undefined) {
      queryParameters["perPage"] = requestParameters.perPage;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/search`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  userSearch = async (
    page: number,
    withPhotos?: boolean,
    onlyVip?: boolean,
    online?: boolean,
    near?: boolean,
    ageEnd?: number,
    ageStart?: number,
    highRating?: boolean,
    sex?: UserSearchSexEnum,
    country?: string,
    perPage?: number
  ): Promise<Array<PublicUserProfileDTO>> => {
    const response = await this.userSearchRaw({
      page: page,
      withPhotos: withPhotos,
      onlyVip: onlyVip,
      online: online,
      near: near,
      ageEnd: ageEnd,
      ageStart: ageStart,
      highRating: highRating,
      sex: sex,
      country: country,
      perPage: perPage,
    });
    return await response.value();
  };

  useUserSearch(
    page: number,
    withPhotos?: boolean,
    onlyVip?: boolean,
    online?: boolean,
    near?: boolean,
    ageEnd?: number,
    ageStart?: number,
    highRating?: boolean,
    sex?: UserSearchSexEnum,
    country?: string,
    perPage?: number,
    config?: SWRConfiguration<Array<PublicUserProfileDTO>, Error>
  ) {
    let valid = true;

    if (page === null || page === undefined || Number.isNaN(page)) {
      valid = false;
    }

    const context = this.userSearchContext({
      page: page!,
      withPhotos: withPhotos!,
      onlyVip: onlyVip!,
      online: online!,
      near: near!,
      ageEnd: ageEnd!,
      ageStart: ageStart!,
      highRating: highRating!,
      sex: sex!,
      country: country!,
      perPage: perPage!,
    });
    return useSWR(
      JSON.stringify(context),
      valid
        ? () =>
            this.userSearch(
              page!,
              withPhotos!,
              onlyVip!,
              online!,
              near!,
              ageEnd!,
              ageStart!,
              highRating!,
              sex!,
              country!,
              perPage!
            )
        : null,
      config
    );
  }

  /**
   */
  private async userSearchPreferencesRaw(): Promise<runtime.ApiResponse<SearchPreference>> {
    this.userSearchPreferencesValidation();
    const context = this.userSearchPreferencesContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => SearchPreferenceFromJSON(jsonValue));
  }

  /**
   */
  private userSearchPreferencesValidation() {}

  /**
   */
  private userSearchPreferencesContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/search-preferences`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  userSearchPreferences = async (): Promise<SearchPreference> => {
    const response = await this.userSearchPreferencesRaw();
    return await response.value();
  };

  useUserSearchPreferences(config?: SWRConfiguration<SearchPreference, Error>) {
    let valid = true;

    const context = this.userSearchPreferencesContext();
    return useSWR(JSON.stringify(context), valid ? () => this.userSearchPreferences() : null, config);
  }

  /**
   */
  private async userUpdateSearchPreferencesRaw(
    requestParameters: UserUpdateSearchPreferencesRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.userUpdateSearchPreferencesValidation(requestParameters);
    const context = this.userUpdateSearchPreferencesContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private userUpdateSearchPreferencesValidation(requestParameters: UserUpdateSearchPreferencesRequest) {
    if (requestParameters.searchPreference === null || requestParameters.searchPreference === undefined) {
      throw new runtime.RequiredError(
        "searchPreference",
        "Required parameter requestParameters.searchPreference was null or undefined when calling userUpdateSearchPreferences."
      );
    }
  }

  /**
   */
  private userUpdateSearchPreferencesContext(
    requestParameters: UserUpdateSearchPreferencesRequest
  ): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/user/search-preferences`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SearchPreferenceToJSON(requestParameters.searchPreference),
    };
  }

  /**
   */
  userUpdateSearchPreferences = async (searchPreference: SearchPreference): Promise<void> => {
    await this.userUpdateSearchPreferencesRaw({ searchPreference: searchPreference });
  };
}

/**
 * @export
 * @enum {string}
 */
export enum UserSearchSexEnum {
  MALE = "MALE",
  FEMALE = "FEMALE",
  UNDEF = "UNDEF",
}
