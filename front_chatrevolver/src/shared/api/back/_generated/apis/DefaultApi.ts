/* tslint:disable */
/* eslint-disable */
/**
 * Revolver API
 * Revolver API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { SWRConfiguration } from "swr";

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   */
  private async classicRaw(): Promise<runtime.ApiResponse<void>> {
    this.classicValidation();
    const context = this.classicContext();
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private classicValidation() {}

  /**
   */
  private classicContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/queue/classic`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  classic = async (): Promise<void> => {
    await this.classicRaw();
  };

  useClassic(config?: SWRConfiguration<void, Error>) {
    let valid = true;

    const context = this.classicContext();
    return useSWR(JSON.stringify(context), valid ? () => this.classic() : null, config);
  }

  /**
   */
  private async ratingRaw(): Promise<runtime.ApiResponse<void>> {
    this.ratingValidation();
    const context = this.ratingContext();
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private ratingValidation() {}

  /**
   */
  private ratingContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/queue/rating`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  rating = async (): Promise<void> => {
    await this.ratingRaw();
  };

  useRating(config?: SWRConfiguration<void, Error>) {
    let valid = true;

    const context = this.ratingContext();
    return useSWR(JSON.stringify(context), valid ? () => this.rating() : null, config);
  }
}
