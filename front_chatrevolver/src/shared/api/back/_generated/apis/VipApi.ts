/* tslint:disable */
/* eslint-disable */
/**
 * Revolver API
 * Revolver API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { SWRConfiguration } from "swr";

import {
  BuyVipDto,
  BuyVipDtoFromJSON,
  BuyVipDtoToJSON,
  VipProductDTO,
  VipProductDTOFromJSON,
  VipProductDTOToJSON,
  VipStatusDTO,
  VipStatusDTOFromJSON,
  VipStatusDTOToJSON,
} from "../models";

export interface BuyVipRequest {
  buyVipDto: BuyVipDto;
}

/**
 *
 */
export class VipApi extends runtime.BaseAPI {
  /**
   */
  private async buyVipRaw(requestParameters: BuyVipRequest): Promise<runtime.ApiResponse<string>> {
    this.buyVipValidation(requestParameters);
    const context = this.buyVipContext(requestParameters);
    const response = await this.request(context);

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  private buyVipValidation(requestParameters: BuyVipRequest) {
    if (requestParameters.buyVipDto === null || requestParameters.buyVipDto === undefined) {
      throw new runtime.RequiredError(
        "buyVipDto",
        "Required parameter requestParameters.buyVipDto was null or undefined when calling buyVip."
      );
    }
  }

  /**
   */
  private buyVipContext(requestParameters: BuyVipRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/vip/buy`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: BuyVipDtoToJSON(requestParameters.buyVipDto),
    };
  }

  /**
   */
  buyVip = async (buyVipDto: BuyVipDto): Promise<string> => {
    const response = await this.buyVipRaw({ buyVipDto: buyVipDto });
    return await response.value();
  };

  /**
   */
  private async enableVipRaw(): Promise<runtime.ApiResponse<void>> {
    this.enableVipValidation();
    const context = this.enableVipContext();
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private enableVipValidation() {}

  /**
   */
  private enableVipContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/vip/enable`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  enableVip = async (): Promise<void> => {
    await this.enableVipRaw();
  };

  /**
   */
  private async vipProductsRaw(): Promise<runtime.ApiResponse<Array<VipProductDTO>>> {
    this.vipProductsValidation();
    const context = this.vipProductsContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VipProductDTOFromJSON));
  }

  /**
   */
  private vipProductsValidation() {}

  /**
   */
  private vipProductsContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/vip/vip_products`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  vipProducts = async (): Promise<Array<VipProductDTO>> => {
    const response = await this.vipProductsRaw();
    return await response.value();
  };

  useVipProducts(config?: SWRConfiguration<Array<VipProductDTO>, Error>) {
    let valid = true;

    const context = this.vipProductsContext();
    return useSWR(JSON.stringify(context), valid ? () => this.vipProducts() : null, config);
  }

  /**
   */
  private async vipStatusRaw(): Promise<runtime.ApiResponse<VipStatusDTO>> {
    this.vipStatusValidation();
    const context = this.vipStatusContext();
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => VipStatusDTOFromJSON(jsonValue));
  }

  /**
   */
  private vipStatusValidation() {}

  /**
   */
  private vipStatusContext(): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/vip/vip_status`,
      method: "GET",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  vipStatus = async (): Promise<VipStatusDTO> => {
    const response = await this.vipStatusRaw();
    return await response.value();
  };

  useVipStatus(config?: SWRConfiguration<VipStatusDTO, Error>) {
    let valid = true;

    const context = this.vipStatusContext();
    return useSWR(JSON.stringify(context), valid ? () => this.vipStatus() : null, config);
  }
}
