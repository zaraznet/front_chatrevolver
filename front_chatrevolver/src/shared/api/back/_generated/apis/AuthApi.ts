/* tslint:disable */
/* eslint-disable */
/**
 * Revolver API
 * Revolver API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { SWRConfiguration } from "swr";

import {
  ChangeEmailDTO,
  ChangeEmailDTOFromJSON,
  ChangeEmailDTOToJSON,
  ChangePasswordDTO,
  ChangePasswordDTOFromJSON,
  ChangePasswordDTOToJSON,
  LoginDTO,
  LoginDTOFromJSON,
  LoginDTOToJSON,
  PasswordRecoveryDTO,
  PasswordRecoveryDTOFromJSON,
  PasswordRecoveryDTOToJSON,
  RegisterDTO,
  RegisterDTOFromJSON,
  RegisterDTOToJSON,
  SetNewPasswordDTO,
  SetNewPasswordDTOFromJSON,
  SetNewPasswordDTOToJSON,
  TokenHold,
  TokenHoldFromJSON,
  TokenHoldToJSON,
} from "../models";

export interface ActivateEmailRequest {
  token: string;
}

export interface ChangeEmailRequest {
  changeEmailDTO: ChangeEmailDTO;
}

export interface ChangePasswordRequest {
  changePasswordDTO: ChangePasswordDTO;
}

export interface InitRecoverPasswordRequest {
  passwordRecoveryDTO: PasswordRecoveryDTO;
}

export interface LoginRequest {
  loginDTO: LoginDTO;
}

export interface RegisterRequest {
  registerDTO: RegisterDTO;
}

export interface SetNewPasswordRequest {
  setNewPasswordDTO: SetNewPasswordDTO;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI {
  /**
   */
  private async activateEmailRaw(requestParameters: ActivateEmailRequest): Promise<runtime.ApiResponse<TokenHold>> {
    this.activateEmailValidation(requestParameters);
    const context = this.activateEmailContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => TokenHoldFromJSON(jsonValue));
  }

  /**
   */
  private activateEmailValidation(requestParameters: ActivateEmailRequest) {
    if (requestParameters.token === null || requestParameters.token === undefined) {
      throw new runtime.RequiredError(
        "token",
        "Required parameter requestParameters.token was null or undefined when calling activateEmail."
      );
    }
  }

  /**
   */
  private activateEmailContext(requestParameters: ActivateEmailRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    return {
      path: `/api/auth/activateEmail/{token}`.replace(
        `{${"token"}}`,
        encodeURIComponent(String(requestParameters.token))
      ),
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
    };
  }

  /**
   */
  activateEmail = async (token: string): Promise<TokenHold> => {
    const response = await this.activateEmailRaw({ token: token });
    return await response.value();
  };

  /**
   */
  private async changeEmailRaw(requestParameters: ChangeEmailRequest): Promise<runtime.ApiResponse<void>> {
    this.changeEmailValidation(requestParameters);
    const context = this.changeEmailContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private changeEmailValidation(requestParameters: ChangeEmailRequest) {
    if (requestParameters.changeEmailDTO === null || requestParameters.changeEmailDTO === undefined) {
      throw new runtime.RequiredError(
        "changeEmailDTO",
        "Required parameter requestParameters.changeEmailDTO was null or undefined when calling changeEmail."
      );
    }
  }

  /**
   */
  private changeEmailContext(requestParameters: ChangeEmailRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/auth/change_email`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ChangeEmailDTOToJSON(requestParameters.changeEmailDTO),
    };
  }

  /**
   */
  changeEmail = async (changeEmailDTO: ChangeEmailDTO): Promise<void> => {
    await this.changeEmailRaw({ changeEmailDTO: changeEmailDTO });
  };

  /**
   */
  private async changePasswordRaw(requestParameters: ChangePasswordRequest): Promise<runtime.ApiResponse<void>> {
    this.changePasswordValidation(requestParameters);
    const context = this.changePasswordContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private changePasswordValidation(requestParameters: ChangePasswordRequest) {
    if (requestParameters.changePasswordDTO === null || requestParameters.changePasswordDTO === undefined) {
      throw new runtime.RequiredError(
        "changePasswordDTO",
        "Required parameter requestParameters.changePasswordDTO was null or undefined when calling changePassword."
      );
    }
  }

  /**
   */
  private changePasswordContext(requestParameters: ChangePasswordRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === "function" ? token("bearer", []) : token;

      if (tokenString) {
        headerParameters["Authorization"] = `Bearer ${tokenString}`;
      }
    }
    return {
      path: `/api/auth/change_password`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: ChangePasswordDTOToJSON(requestParameters.changePasswordDTO),
    };
  }

  /**
   */
  changePassword = async (changePasswordDTO: ChangePasswordDTO): Promise<void> => {
    await this.changePasswordRaw({ changePasswordDTO: changePasswordDTO });
  };

  /**
   */
  private async initRecoverPasswordRaw(
    requestParameters: InitRecoverPasswordRequest
  ): Promise<runtime.ApiResponse<void>> {
    this.initRecoverPasswordValidation(requestParameters);
    const context = this.initRecoverPasswordContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private initRecoverPasswordValidation(requestParameters: InitRecoverPasswordRequest) {
    if (requestParameters.passwordRecoveryDTO === null || requestParameters.passwordRecoveryDTO === undefined) {
      throw new runtime.RequiredError(
        "passwordRecoveryDTO",
        "Required parameter requestParameters.passwordRecoveryDTO was null or undefined when calling initRecoverPassword."
      );
    }
  }

  /**
   */
  private initRecoverPasswordContext(requestParameters: InitRecoverPasswordRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/auth/initRecover`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: PasswordRecoveryDTOToJSON(requestParameters.passwordRecoveryDTO),
    };
  }

  /**
   */
  initRecoverPassword = async (passwordRecoveryDTO: PasswordRecoveryDTO): Promise<void> => {
    await this.initRecoverPasswordRaw({ passwordRecoveryDTO: passwordRecoveryDTO });
  };

  /**
   */
  private async loginRaw(requestParameters: LoginRequest): Promise<runtime.ApiResponse<TokenHold>> {
    this.loginValidation(requestParameters);
    const context = this.loginContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => TokenHoldFromJSON(jsonValue));
  }

  /**
   */
  private loginValidation(requestParameters: LoginRequest) {
    if (requestParameters.loginDTO === null || requestParameters.loginDTO === undefined) {
      throw new runtime.RequiredError(
        "loginDTO",
        "Required parameter requestParameters.loginDTO was null or undefined when calling login."
      );
    }
  }

  /**
   */
  private loginContext(requestParameters: LoginRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/auth/login`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: LoginDTOToJSON(requestParameters.loginDTO),
    };
  }

  /**
   */
  login = async (loginDTO: LoginDTO): Promise<TokenHold> => {
    const response = await this.loginRaw({ loginDTO: loginDTO });
    return await response.value();
  };

  /**
   */
  private async registerRaw(requestParameters: RegisterRequest): Promise<runtime.ApiResponse<void>> {
    this.registerValidation(requestParameters);
    const context = this.registerContext(requestParameters);
    const response = await this.request(context);

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  private registerValidation(requestParameters: RegisterRequest) {
    if (requestParameters.registerDTO === null || requestParameters.registerDTO === undefined) {
      throw new runtime.RequiredError(
        "registerDTO",
        "Required parameter requestParameters.registerDTO was null or undefined when calling register."
      );
    }
  }

  /**
   */
  private registerContext(requestParameters: RegisterRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/auth/register`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: RegisterDTOToJSON(requestParameters.registerDTO),
    };
  }

  /**
   */
  register = async (registerDTO: RegisterDTO): Promise<void> => {
    await this.registerRaw({ registerDTO: registerDTO });
  };

  /**
   */
  private async setNewPasswordRaw(requestParameters: SetNewPasswordRequest): Promise<runtime.ApiResponse<TokenHold>> {
    this.setNewPasswordValidation(requestParameters);
    const context = this.setNewPasswordContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => TokenHoldFromJSON(jsonValue));
  }

  /**
   */
  private setNewPasswordValidation(requestParameters: SetNewPasswordRequest) {
    if (requestParameters.setNewPasswordDTO === null || requestParameters.setNewPasswordDTO === undefined) {
      throw new runtime.RequiredError(
        "setNewPasswordDTO",
        "Required parameter requestParameters.setNewPasswordDTO was null or undefined when calling setNewPassword."
      );
    }
  }

  /**
   */
  private setNewPasswordContext(requestParameters: SetNewPasswordRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/auth/setNewPassword`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: SetNewPasswordDTOToJSON(requestParameters.setNewPasswordDTO),
    };
  }

  /**
   */
  setNewPassword = async (setNewPasswordDTO: SetNewPasswordDTO): Promise<TokenHold> => {
    const response = await this.setNewPasswordRaw({ setNewPasswordDTO: setNewPasswordDTO });
    return await response.value();
  };
}
