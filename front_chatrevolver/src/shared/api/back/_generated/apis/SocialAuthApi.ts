/* tslint:disable */
/* eslint-disable */
/**
 * Revolver API
 * Revolver API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import useSWR, { SWRConfiguration } from "swr";

import {
  AccessToken,
  AccessTokenFromJSON,
  AccessTokenToJSON,
  TokenHold,
  TokenHoldFromJSON,
  TokenHoldToJSON,
} from "../models";

export interface VkAuthAppRequest {
  accessToken: AccessToken;
}

/**
 *
 */
export class SocialAuthApi extends runtime.BaseAPI {
  /**
   */
  private async vkAuthAppRaw(requestParameters: VkAuthAppRequest): Promise<runtime.ApiResponse<TokenHold>> {
    this.vkAuthAppValidation(requestParameters);
    const context = this.vkAuthAppContext(requestParameters);
    const response = await this.request(context);

    return new runtime.JSONApiResponse(response, (jsonValue) => TokenHoldFromJSON(jsonValue));
  }

  /**
   */
  private vkAuthAppValidation(requestParameters: VkAuthAppRequest) {
    if (requestParameters.accessToken === null || requestParameters.accessToken === undefined) {
      throw new runtime.RequiredError(
        "accessToken",
        "Required parameter requestParameters.accessToken was null or undefined when calling vkAuthApp."
      );
    }
  }

  /**
   */
  private vkAuthAppContext(requestParameters: VkAuthAppRequest): runtime.RequestOpts {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    return {
      path: `/api/vk/app`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: AccessTokenToJSON(requestParameters.accessToken),
    };
  }

  /**
   */
  vkAuthApp = async (accessToken: AccessToken): Promise<TokenHold> => {
    const response = await this.vkAuthAppRaw({ accessToken: accessToken });
    return await response.value();
  };
}
