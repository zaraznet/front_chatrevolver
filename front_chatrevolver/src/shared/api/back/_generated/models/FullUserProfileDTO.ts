/* tslint:disable */
/* eslint-disable */
/**
 * Revolver API
 * Revolver API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  ConnectionDTO,
  ConnectionDTOFromJSON,
  ConnectionDTOFromJSONTyped,
  ConnectionDTOToJSON,
  ImageEntityDTO,
  ImageEntityDTOFromJSON,
  ImageEntityDTOFromJSONTyped,
  ImageEntityDTOToJSON,
  UserRelationDTO,
  UserRelationDTOFromJSON,
  UserRelationDTOFromJSONTyped,
  UserRelationDTOToJSON,
} from "./";

/**
 *
 * @export
 * @interface FullUserProfileDTO
 */
export interface FullUserProfileDTO {
  /**
   *
   * @type {number}
   * @memberof FullUserProfileDTO
   */
  id: number;
  /**
   *
   * @type {boolean}
   * @memberof FullUserProfileDTO
   */
  online: boolean;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileDTO
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileDTO
   */
  sex: FullUserProfileDTOSexEnum;
  /**
   *
   * @type {boolean}
   * @memberof FullUserProfileDTO
   */
  vip: boolean;
  /**
   *
   * @type {Date}
   * @memberof FullUserProfileDTO
   */
  birthday?: Date;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileDTO
   */
  image?: string;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileDTO
   */
  imageAbsolutePath: string;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileDTO
   */
  country?: string;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileDTO
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileDTO
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileDTO
   */
  descriptionPrivate?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof FullUserProfileDTO
   */
  tags?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof FullUserProfileDTO
   */
  rating?: number;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileDTO
   */
  status: string;
  /**
   *
   * @type {Array<ImageEntityDTO>}
   * @memberof FullUserProfileDTO
   */
  images?: Array<ImageEntityDTO>;
  /**
   *
   * @type {UserRelationDTO}
   * @memberof FullUserProfileDTO
   */
  relation?: UserRelationDTO;
  /**
   *
   * @type {number}
   * @memberof FullUserProfileDTO
   */
  chatId?: number;
  /**
   *
   * @type {number}
   * @memberof FullUserProfileDTO
   */
  distance?: number;
  /**
   *
   * @type {boolean}
   * @memberof FullUserProfileDTO
   */
  blocked: boolean;
  /**
   *
   * @type {boolean}
   * @memberof FullUserProfileDTO
   */
  deleted: boolean;
  /**
   *
   * @type {Array<ConnectionDTO>}
   * @memberof FullUserProfileDTO
   */
  connections: Array<ConnectionDTO>;
  /**
   *
   * @type {string}
   * @memberof FullUserProfileDTO
   */
  email?: string;
  /**
   *
   * @type {boolean}
   * @memberof FullUserProfileDTO
   */
  hide?: boolean;
  /**
   *
   * @type {number[]}
   * @memberof FullUserProfileDTO
   */
  blocks?: number[];
}

export function FullUserProfileDTOFromJSON(json: any): FullUserProfileDTO {
  return FullUserProfileDTOFromJSONTyped(json, false);
}

export function FullUserProfileDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullUserProfileDTO {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    online: json["online"],
    name: json["name"],
    sex: json["sex"],
    vip: json["vip"],
    birthday: !exists(json, "birthday") ? undefined : new Date(json["birthday"]),
    image: !exists(json, "image") ? undefined : json["image"],
    imageAbsolutePath: json["imageAbsolutePath"],
    country: !exists(json, "country") ? undefined : json["country"],
    city: !exists(json, "city") ? undefined : json["city"],
    description: json["description"],
    descriptionPrivate: !exists(json, "descriptionPrivate") ? undefined : json["descriptionPrivate"],
    tags: !exists(json, "tags") ? undefined : json["tags"],
    rating: !exists(json, "rating") ? undefined : json["rating"],
    status: json["status"],
    images: !exists(json, "images") ? undefined : (json["images"] as Array<any>).map(ImageEntityDTOFromJSON),
    relation: !exists(json, "relation") ? undefined : UserRelationDTOFromJSON(json["relation"]),
    chatId: !exists(json, "chatId") ? undefined : json["chatId"],
    distance: !exists(json, "distance") ? undefined : json["distance"],
    blocked: json["blocked"],
    deleted: json["deleted"],
    connections: (json["connections"] as Array<any>).map(ConnectionDTOFromJSON),
    email: !exists(json, "email") ? undefined : json["email"],
    hide: json["hide"],
    blocks: !exists(json, "blocks") ? undefined : json["blocks"],
  };
}

export function FullUserProfileDTOToJSON(value?: FullUserProfileDTO | null): any {
  if (value === undefined) {
    return null;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id === undefined ? undefined : value.id,
    online: value.online === undefined ? undefined : value.online,
    name: value.name === undefined ? undefined : value.name,
    sex: value.sex === undefined ? undefined : value.sex,
    vip: value.vip === undefined ? undefined : value.vip,
    birthday: value.birthday === undefined ? undefined : value.birthday.toISOString(),
    image: value.image === undefined ? undefined : value.image,
    imageAbsolutePath: value.imageAbsolutePath === undefined ? undefined : value.imageAbsolutePath,
    country: value.country === undefined ? undefined : value.country,
    city: value.city === undefined ? undefined : value.city,
    description: value.description === undefined ? undefined : value.description,
    descriptionPrivate: value.descriptionPrivate === undefined ? undefined : value.descriptionPrivate,
    tags: value.tags === undefined ? undefined : value.tags,
    rating: value.rating === undefined ? undefined : value.rating,
    status: value.status === undefined ? undefined : value.status,
    images: value.images === undefined ? undefined : ((value.images || []) as Array<any>).map(ImageEntityDTOToJSON),
    relation: UserRelationDTOToJSON(value.relation),
    chatId: value.chatId === undefined ? undefined : value.chatId,
    distance: value.distance === undefined ? undefined : value.distance,
    blocked: value.blocked === undefined ? undefined : value.blocked,
    deleted: value.deleted === undefined ? undefined : value.deleted,
    connections: ((value.connections || []) as Array<any>).map(ConnectionDTOToJSON),
    email: value.email === undefined ? undefined : value.email,
    hide: value.hide === undefined ? undefined : value.hide,
    blocks: value.blocks === undefined ? undefined : value.blocks,
  };
}

/**
 * @export
 * @enum {string}
 */
export enum FullUserProfileDTOSexEnum {
  MALE = "MALE",
  FEMALE = "FEMALE",
  UNDEF = "UNDEF",
}
