/* tslint:disable */
/* eslint-disable */
/**
 * Revolver API
 * Revolver API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  EmailNotificationEntity,
  EmailNotificationEntityFromJSON,
  EmailNotificationEntityFromJSONTyped,
  EmailNotificationEntityToJSON,
  FollowRequestEntity,
  FollowRequestEntityFromJSON,
  FollowRequestEntityFromJSONTyped,
  FollowRequestEntityToJSON,
  PrivacyEntity,
  PrivacyEntityFromJSON,
  PrivacyEntityFromJSONTyped,
  PrivacyEntityToJSON,
  QueuePreferenceEntity,
  QueuePreferenceEntityFromJSON,
  QueuePreferenceEntityFromJSONTyped,
  QueuePreferenceEntityToJSON,
  SearchPreference,
  SearchPreferenceFromJSON,
  SearchPreferenceFromJSONTyped,
  SearchPreferenceToJSON,
  UserConnectionEntity,
  UserConnectionEntityFromJSON,
  UserConnectionEntityFromJSONTyped,
  UserConnectionEntityToJSON,
  UserProfileEntity,
  UserProfileEntityFromJSON,
  UserProfileEntityFromJSONTyped,
  UserProfileEntityToJSON,
  VipEntity,
  VipEntityFromJSON,
  VipEntityFromJSONTyped,
  VipEntityToJSON,
} from "./";

/**
 *
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
  /**
   *
   * @type {number}
   * @memberof UserEntity
   */
  id: number;
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  deleted: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserEntity
   */
  blocked: boolean;
  /**
   *
   * @type {Array<UserConnectionEntity>}
   * @memberof UserEntity
   */
  connections: Array<UserConnectionEntity>;
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  passwordHash?: string;
  /**
   *
   * @type {string}
   * @memberof UserEntity
   */
  passwordRecoveryCode?: string;
  /**
   *
   * @type {QueuePreferenceEntity}
   * @memberof UserEntity
   */
  qPreference: QueuePreferenceEntity;
  /**
   *
   * @type {PrivacyEntity}
   * @memberof UserEntity
   */
  privacy: PrivacyEntity;
  /**
   *
   * @type {EmailNotificationEntity}
   * @memberof UserEntity
   */
  notifications: EmailNotificationEntity;
  /**
   *
   * @type {UserProfileEntity}
   * @memberof UserEntity
   */
  profile: UserProfileEntity;
  /**
   *
   * @type {object}
   * @memberof UserEntity
   */
  email: object;
  /**
   *
   * @type {VipEntity}
   * @memberof UserEntity
   */
  vip?: VipEntity;
  /**
   *
   * @type {Array<FollowRequestEntity>}
   * @memberof UserEntity
   */
  follows: Array<FollowRequestEntity>;
  /**
   *
   * @type {Array<FollowRequestEntity>}
   * @memberof UserEntity
   */
  followers: Array<FollowRequestEntity>;
  /**
   *
   * @type {SearchPreference}
   * @memberof UserEntity
   */
  searchPreference: SearchPreference;
  /**
   *
   * @type {blocks}
   * @memberof UserEntity
   */
  blocks: number[];
}

export function UserEntityFromJSON(json: any): UserEntity {
  return UserEntityFromJSONTyped(json, false);
}

export function UserEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserEntity {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    deleted: json["deleted"],
    blocked: json["blocked"],
    connections: (json["connections"] as Array<any>).map(UserConnectionEntityFromJSON),
    passwordHash: json["passwordHash"] === null ? undefined : json["passwordHash"],
    passwordRecoveryCode: json["passwordRecoveryCode"] === null ? undefined : json["passwordRecoveryCode"],
    qPreference: QueuePreferenceEntityFromJSON(json["qPreference"]),
    privacy: PrivacyEntityFromJSON(json["privacy"]),
    notifications: EmailNotificationEntityFromJSON(json["notifications"]),
    profile: UserProfileEntityFromJSON(json["profile"]),
    email: json["email"],
    vip: !exists(json, "vip") ? undefined : VipEntityFromJSON(json["vip"]),
    follows: (json["follows"] as Array<any>).map(FollowRequestEntityFromJSON),
    followers: (json["followers"] as Array<any>).map(FollowRequestEntityFromJSON),
    searchPreference: SearchPreferenceFromJSON(json["searchPreference"]),
    blocks: json["blocks"],
  };
}

export function UserEntityToJSON(value?: UserEntity | null): any {
  if (value === undefined) {
    return null;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id === undefined ? undefined : value.id,
    deleted: value.deleted === undefined ? undefined : value.deleted,
    blocked: value.blocked === undefined ? undefined : value.blocked,
    connections: ((value.connections || []) as Array<any>).map(UserConnectionEntityToJSON),
    passwordHash: value.passwordHash === undefined ? undefined : value.passwordHash,
    passwordRecoveryCode: value.passwordRecoveryCode === undefined ? undefined : value.passwordRecoveryCode,
    qPreference: QueuePreferenceEntityToJSON(value.qPreference),
    privacy: PrivacyEntityToJSON(value.privacy),
    notifications: EmailNotificationEntityToJSON(value.notifications),
    profile: UserProfileEntityToJSON(value.profile),
    email: value.email,
    vip: VipEntityToJSON(value.vip),
    follows: ((value.follows || []) as Array<any>).map(FollowRequestEntityToJSON),
    followers: ((value.followers || []) as Array<any>).map(FollowRequestEntityToJSON),
    searchPreference: SearchPreferenceToJSON(value.searchPreference),
    blocks: value.blocks === undefined ? undefined : value.blocks,
  };
}
